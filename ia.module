<?php



/**
 * Implementation of hook_perm().
 *
 * Add specifi IA Permission
 */
function ia_perm() {
  return array('view simplified forms');
}



/**
 * Common form simplification for some forms and some users (called from hook_form_alter)
 * To hide form element we use #access property
 * To check which user see a simplified form version we check 'view simplified forms' permission
 * 
 * @param $form 
 *   An associative array containing the structure of the form.
 * @param hide_fields 
 *   An array of additional fields to hide
 * @param hide_fields1
 *   A multidimensional array that pass the fields keys to deny the access
*/
 function _ia_form_simplify(&$form, $hide_fields = array(), $hide_fields1 = array()) {
   if (user_access('view simplified forms')) {
     
     /*
     // A enlever car pas géneralisable
     
      $hide_plus = array (
        // Auhtoring : pouvoir changer l'auteur
        array('author'),
        
        // Promote to home page 
        array('options','promote'),
        // Sticky at the top of the list 
        array('options', 'sticky'),
        // Bouton preview
        array('buttons', 'preview'),
        
      );
      
      $hide_fields1 = array_merge ($hide_fields1, $hide_plus);
      */
      
      // Champs spécifique au type de contenu caché à la demande  
      foreach ($hide_fields as $key => $field_name) {
        $form[$field_name]['#access'] = FALSE;
      }
      
      // Deuxième interprétation pour passer des arguments à plusieurs clés
      if($hide_fields1){
        //dsm($hide_fields1);
        // The function works with 4 dimensions of array
        // todo generalize it to whatever dimensions
        foreach($hide_fields1 as $key => $array){
          switch (count($array)) {
            case 1:
                $form[$array[0]]['#access'] = FALSE;  
            break; 
            case 2:
              $form[$array[0]][$array[1]]['#access'] = FALSE;  ;
            break;
            case 3:
              $form[$array[0]][$array[1]][$array[2]]['#access'] = FALSE;     
            break;
            case 4:
              $form[$array[0]][$array[1]][$array[2]][$array[3]]['#access'] = FALSE;     
            break;
          }
        }
      }
    }
 }


/**
 * Give a special class to a span of fields to make them float
 *
 * @param $form 
 *   An associative array containing the structure of the form.
 * @param $fields
 *   An array of fields name the key being the first field to float, the value the last on
 * @return
 *   Nothing.
*/
function _ia_form_float(&$form, $fields) {
  foreach ($fields as $first => $last) {
    //dsm ($last);
    $form[$first][0]['#prefix'] = '<div class="ia_fields_group">';
    $form[$last][0]['#suffix'] = '</div>';
  }
}

