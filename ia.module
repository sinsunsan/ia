<?php



/**
 * Implementation of hook_perm().
 *
 * Add specifi IA Permission
 */
function ia_perm() {
  return array('view simplified forms');
}

/**
 * Common form simplification for some forms and some users (called from hook_form_alter)
 * To hide form element we use #access property
 * To check which user see a simplified form version we check 'view simplified forms' permission
 * 
 * @param $form 
 *   An associative array containing the structure of the form.
 * @param hide_fields 
 *   An array of additional fields to hide
 * @param hide_fields1
 *   A multidimensional array that pass the fields keys to deny the access
*/
function _ia_form_simplify(&$form, $hide_fields = array(), $hide_fields1 = array()) {
   if (user_access('view simplified forms')) {
     
      // Champs spécifique au type de contenu caché à la demande  
      foreach ($hide_fields as $key => $field_name) {
        $form[$field_name]['#access'] = FALSE;
      }
      
      // Deuxième interprétation pour passer des arguments à plusieurs clés
      if($hide_fields1){
        //dsm($hide_fields1);
        // The function works with 4 dimensions of array
        // todo generalize it to whatever dimensions
        foreach($hide_fields1 as $key => $array){
          switch (count($array)) {
            case 1:
                $form[$array[0]]['#access'] = FALSE;  
            break; 
            case 2:
              $form[$array[0]][$array[1]]['#access'] = FALSE;  ;
            break;
            case 3:
              $form[$array[0]][$array[1]][$array[2]]['#access'] = FALSE;     
            break;
            case 4:
              $form[$array[0]][$array[1]][$array[2]][$array[3]]['#access'] = FALSE;     
            break;
          }
        }
      }
    }
 }


/**
 * Give a special class to a span of fields to make them float
 *
 * @param $form 
 *   An associative array containing the structure of the form.
 * @param $fields
 *   An array of fields name the key being the first field to float, the value the last on
 * @return
 *   Nothing.
*/
function _ia_form_float(&$form, $fields) {
  //dsm($fields);
  foreach ($fields as $first => $last) {
    // All fields don't have numeric keys 
    // surely those with more than one value (to check)
    // We add the ia_fields_group class and make a wrapping div
    if (isset($form[$first][0])){
      $form[$first][0]['#prefix'] = '<div class="ia_fields_group">';
    }else{
      $form[$first]['#prefix'] = '<div class="ia_fields_group">';
    }
    // We add the closing div
    if (isset($form[$last][0])) {
      $form[$last][0]['#suffix'] = '</div>';
    }else{
      $form[$last]['#suffix'] = '</div>';
    }
  }
}




/**
 * Remove the second fields created by filefield 
 * When the cardinality is set to unlimited
 * 
 * @param $fields
 *   An array of fields name 
 *
*/
function _ia_multiplefields_simplify(&$form, $fields) {
  //dsm($fields);
  foreach ($fields as $key => $field_name) {
    //dsm($form[$field_name]);
    
    // Tested on normal filefield 
    // If you upload 
    // loop to test the existence of up to 20 fields and unset the empty one
    // The user should use the add another button to add more.
    for ($i=1 ; $i<20 ; $i++){
      if (isset($form[$field_name][$i])) { // The numeric key exist
        //dsm ($i);
        $row = $form[$field_name][$i]['#default_value'];
        //dsm ($row);
        
        // The case of multiple file fields
        if ( isset($row['fid']) && $row['fid'] == 0){
          //dsm ('file field multiple field hidden');
          unset($form[$field_name][$i]);
        }
        // The case of multiple node reference field
        if (!isset($row['nid'])) {
            //dsm ('node reference multiple field hidden');
           // We unset the sub array
           unset($form[$field_name][$i]);
        }
      }//end of if  
    }//end of for
  }// end of foreach
} 
 
/**
 * Check if the connected user has one of the roles passed in argument 
 *
 * It pass the array of roles in argument and return TRUE 
 * When it identify the first valid rid
 *
 * @param An array of rid that we want to check
 * @param An optional $user object
 *
 * @return TRUE if the user have one of this rid
 *
*/
 
function _ia_has_role($roles , &$user = NULL) {
  // If the $user_uid is set 
  // We load the $user
  if (!$user){
    global $user; 
  }
  $user_rid = array_keys($user->roles);
  
  if (!is_array($roles)){$roles = array($roles);}
  foreach ($roles as $key => $rid){
    //dsm($rid);
    //dsm($user_rid);
    if (in_array($rid,$user_rid)){
        //dsm('le role a été trouvé');
       return TRUE;
    }else{
       return FALSE;
    } 
  }
}
 
